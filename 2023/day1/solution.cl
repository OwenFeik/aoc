(require "asdf")

(defparameter data (uiop:read-file-lines "data.txt"))

(defun part-one ()
    (defun calibration-value (entry)
        (let ((digits (remove-if-not 'digit-char-p (coerce entry 'list))))
            (+
                (* (parse-integer (string (first digits))) 10)
                (parse-integer (string (car (last digits)))))))

    (print (apply '+ (mapcar 'calibration-value data))))

(defun part-two () 
    (defun first-digit (entry) (cond
        ((uiop:string-prefix-p "1" entry) 1)
        ((uiop:string-prefix-p "one" entry) 1)
        ((uiop:string-prefix-p "2" entry) 2)
        ((uiop:string-prefix-p "two" entry) 2)
        ((uiop:string-prefix-p "3" entry) 3)
        ((uiop:string-prefix-p "three" entry) 3)
        ((uiop:string-prefix-p "4" entry) 4)
        ((uiop:string-prefix-p "four" entry) 4)
        ((uiop:string-prefix-p "5" entry) 5)
        ((uiop:string-prefix-p "five" entry) 5)
        ((uiop:string-prefix-p "6" entry) 6)
        ((uiop:string-prefix-p "six" entry) 6)
        ((uiop:string-prefix-p "7" entry) 7)
        ((uiop:string-prefix-p "seven" entry) 7)
        ((uiop:string-prefix-p "8" entry) 8)
        ((uiop:string-prefix-p "eight" entry) 8)
        ((uiop:string-prefix-p "9" entry) 9)
        ((uiop:string-prefix-p "nine" entry) 9)
        ((first-digit (subseq entry 1)))))

    (defun last-digit (entry) (cond
        ((uiop:string-suffix-p entry "1") 1)
        ((uiop:string-suffix-p entry "one") 1)
        ((uiop:string-suffix-p entry "2") 2)
        ((uiop:string-suffix-p entry "two") 2)
        ((uiop:string-suffix-p entry "3") 3)
        ((uiop:string-suffix-p entry "three") 3)
        ((uiop:string-suffix-p entry "4") 4)
        ((uiop:string-suffix-p entry "four") 4)
        ((uiop:string-suffix-p entry "5") 5)
        ((uiop:string-suffix-p entry "five") 5)
        ((uiop:string-suffix-p entry "6") 6)
        ((uiop:string-suffix-p entry "six") 6)
        ((uiop:string-suffix-p entry "7") 7)
        ((uiop:string-suffix-p entry "seven") 7)
        ((uiop:string-suffix-p entry "8") 8)
        ((uiop:string-suffix-p entry "eight") 8)
        ((uiop:string-suffix-p entry "9") 9)
        ((uiop:string-suffix-p entry "nine") 9)
        ((last-digit (subseq entry 0 (- (length entry) 1))))))

    (defun calibration-value (entry)
        (+ (* (first-digit entry) 10) (last-digit entry)))

    (print (apply '+ (mapcar 'calibration-value data))))
